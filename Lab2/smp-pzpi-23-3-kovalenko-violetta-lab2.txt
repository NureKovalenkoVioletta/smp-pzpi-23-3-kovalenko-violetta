Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра Програмної інженерії






Звіт
З лабораторної роботи №2
з дисципліни «Скриптові мови програмування»
на тему: «Розробка консольного застосунку з використанням php»
















Виконала                                                                             Перевірив
ст.гр ПЗПІ-23-3                                                        ст. в. Сокорчук І.П.
Коваленко В.О.










Харків 2025
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	12.05.2025
	       0.1
	Додано розділ “Завдання” та “Опис виконаної роботи”
	2
	13.05.2025
	28.  0.2
	Додано підрозділ “Хід роботи”
	3
	15.05.2025
	2.1  0.3
	Додано підрозділ “Тестування скрипта”
	4
	16.05.2025
	12.10.4
	Додано розділ “Висновки”
	5
	16.05.2025
	10.10.5
	Додано “Додаток А”, “Додаток Б”, “Додаток В”
	2 ЗАВДАННЯ
2.1 Постановка завдання
Потрібно створити консольний застосунок «Продовольчий магазин "Весна"».
2.2 Вимоги до скрипта
* Ім'я скрипта має бути у форматі: домашній каталог користувача + ім’я облікового запису + "-task3.php".
* Після запуску на екран виводиться головне меню із заголовком магазину і такими пунктами: “Вибрати товари”, “Отримати підсумковий рахунок”, “Налаштувати свій профіль”, “Вийти з програми”
* Програма очікує введення номера команди. Якщо користувач вводить число, якого немає в списку, має виводитися повідомлення про помилку і повторно показувати меню.
* При виборі пункту для покупки товарів (номер 1) виводиться список товарів із номерами, назвами і цінами, а також опція повернення в головне меню.
* Користувач обирає товар за номером. Якщо введено неправильний номер, виводиться повідомлення про помилку, а список товарів відображається знову.
* Після вибору товару користувача просять ввести кількість штук. Кількість має бути від 0 до 99.
* Якщо введена кількість більше 0 — товар додається або оновлюється в кошику.
* Якщо кількість 0 — товар видаляється з кошика. Якщо кошик стає порожнім, виводиться відповідне повідомлення.
* Після операції купівлі знову показується список товарів і пропонується вибрати наступний товар або повернутися.
* При виборі пункту для отримання підсумкового рахунку (номер 2) виводиться детальний список товарів у кошику із номером, назвою, ціною, кількістю і загальною вартістю кожного товару.
* В кінці рахунку показується загальна сума до сплати.
* При виборі пункту для налаштування профілю (номер 3) користувач вводить ім’я і вік.
* Ім’я користувача не може бути порожнім і має містити хоча б одну літеру.
* Вік користувача повинен бути в діапазоні від 7 до 150 років.
* Для виходу з програми потрібно вибрати пункт з номером 0.
* Усі введені користувачем дані мають перевірятися на коректність із відповідними повідомленнями про помилки.

________________
3 ОПИС ВИКОНАНОЇ РОБОТИ 
3.1 Хід роботи
Під час виконання лабораторної роботи №2 бцдемо покроково створювати консольний застосунок «Продовольчий магазин "Весна"» з використанням php
3.1.1 Створення необхідних файлів
Для виконання лабораторної роботи №2 потрібно створити два файли з розширеннями .php. В першому файлі буде міститися вся логіка консольного застосунку, у другому файлі будуть знаходитися дані для відображення на консолі
3.1.2 Створення функція для відображення головного меню
Для відображення головного екрану з можливістю інтерактивного вибору була створена функція displayMainMenu(), яка виводить у консоль список основних команд для користувача:
   * 1 — вибрати товари,
   * 2 — отримати підсумковий рахунок,
   * 3 — налаштувати профіль,
   * 0 — вийти з програми.
В кінці функція виводить запит "Введіть команду: " для вводу користувачем вибору. Фрагмент коду наведений нижче:


 54 function displayMainMenu() {
 55     echo "################################\n";
 56     echo "# ПРОДОВОЛЬЧИЙ МАГАЗИН \"ВЕСНА\" #\n";
 57     echo "################################\n";
 58     echo "1 Вибрати товари\n";
 59     echo "2 Отримати підсумковий рахунок\n";
 60     echo "3 Налаштувати свій профіль\n";
 61     echo "0 Вийти з програми\n";
 62     echo "Введіть команду: ";
 63 }






3.1.3 Створення функція для відображення товарів
Для відображення товарів, які можна придбати в магазині користувачу, була створена функція displayProducts, яка  відповідає за виведення списку товарів у вигляді таблиці в консоль. Вона спочатку визначає потрібну ширину колонок для номерів, назв і цін товарів. Потім виводить заголовки колонок, а далі — кожен товар з його ідентифікатором, назвою і ціною, також вирівняні по ширині колонок. Після списку малює роздільну лінію, пропонує опцію «0 Повернутися» для виходу із вибору товару і в кінці запитує користувача вибрати номер товару для подальших дій. Фрагмент коду наведений нижче: 
 65 function displayProducts($products) {
 66     $maxLengths = getMaxLengths($products);
 67     $idWidth = $maxLengths['id'] + 2;
 68     $nameWidth = $maxLengths['name'] + 2;
 69     $priceWidth = $maxLengths['price'] + 2;
 70
 71     echo utf8_str_pad('№', $idWidth);
 72     echo utf8_str_pad('НАЗВА', $nameWidth);
 73     echo utf8_str_pad('ЦІНА', $priceWidth);
 74     echo "\n";
 75
 76     foreach ($products as $product) {
 77         echo utf8_str_pad((string)$product['id'], $idWidth);
 78         echo utf8_str_pad($product['name'], $nameWidth);
 79         echo utf8_str_pad((string)$product['price'], $priceWidth);
 80         echo "\n";
 81     }
 82     echo str_repeat('-', $idWidth + $nameWidth + $priceWidth) . "\n";
 83     echo "0  ПОВЕРНУТИСЯ\n";
 84     echo "Виберіть товар: ";
 85 }
 86


3.1.4 Створення функції для відображення поточного стану кошика
Для відображення поточного стану кошика користувача, була розроблена функція displayCart. Якщо кошик порожній, вона просто виводить повідомлення "КОШИК ПОРОЖНІЙ" і завершує роботу. Якщо ж у кошику є товари, функція виводить заголовок "У КОШИКУ:", потім у вигляді списку показує назви товарів і відповідну кількість кожного. Для кожного товару перевіряє, чи він існує в основному списку товарів, щоб уникнути помилок, і потім виводить назву, вирівняну по ширині, та кількість штук. Фрагмент коду наведений нижче:
 87 function displayCart($cart, $products) {
 88     if (empty($cart)) {
 89         echo "КОШИК ПОРОЖНІЙ\n";
 90         return;
 91     }
 92
 93     echo "У КОШИКУ:\n";
 94     echo utf8_str_pad("НАЗВА", 15);
 95     echo "КІЛЬКІСТЬ\n";
 96
 97     foreach ($cart as $productId => $quantity) {
 98         if (!isset($products[$productId])) continue;
 99
100         $product = $products[$productId];
101         echo utf8_str_pad($product['name'], 15);
102         echo $quantity . "\n";
103     }
104 }


3.1.5 Створення функції для відображення підсумкового рахунку
Функція displayBill показує підсумковий рахунок з деталями покупки. Спочатку вона перевіряє, чи є товари у кошику; якщо ні — виводить "КОШИК ПОРОЖНІЙ" і завершує роботу. Якщо кошик не порожній, функція рахує максимальну ширину колонок для номеру, назви, ціни, кількості і вартості, щоб вирівняти таблицю, а потім виводить заголовки цих колонок. Далі проходить по кожному товару в кошику, обчислює вартість за кількістю товарів, сумує загальну суму і виводить рядок з номером, назвою, ціною, кількістю та вартістю товару, вирівняними по ширині колонок. Наприкінці показує загальну суму до сплати. Фрагмент коду наведений у додатку В, В1


3.1.6 Створення та налагодження профіля користувача
Під час розробки програмного застосунку був реалізований мінімальний функціонал для створення та налагодження профіля користувача. За зберігання даних відповідає масив, фрагмент коду наведений нижче:


 11 $profile = [
 12     'name' => '',
 13     'age' => 0
 14 ];


За валідацію даних, а саме за перевірку імені та віку відповілають такі функції як: validateName та validateAge. Фрагмент коду наведений нижче:


158 function validateName($name) {
159     return preg_match('/[a-zA-Zа-яА-Я]/u', $name);
160 }
161
162 function validateAge($age) {
163     return is_numeric($age) && $age >= 7 && $age <= 150;
164 }


3.1.7 Створення головного циклу застосунку
Для постійного показу головного меню користувачеві, був створений головний цикл програми (див. додаток В, В2), який постійно показує користувачу головне меню і очікує на його команду через консоль. Після виведення меню програма зчитує введене користувачем значення і переходить до обробки вибору за допомогою конструкції switch. Якщо користувач вводить '0', програма завершує роботу і виводить прощальне повідомлення.
При виборі '1' запускається внутрішній цикл, де користувач бачить список товарів і може обрати номер потрібного товару або '0' для виходу назад у головне меню. Якщо вибір неправильний (нечисловий або відсутній у списку), програма показує помилку і запитує заново. Після правильного вибору користувач вводить кількість одиниць товару — значення має бути від 0 до 99. Якщо кількість 0, товар видаляється з кошика, інакше оновлюється або додається відповідна позиція. Після кожної зміни виводиться актуальний стан кошика.
Команда '2' відповідає за показ підсумкового рахунку — якщо кошик порожній, користувача про це інформують, інакше показують детальний перелік товарів із загальною сумою.
При виборі '3' користувач налаштовує свій профіль — вводить ім’я і вік, які проходять перевірку на коректність. Якщо введені дані не відповідають вимогам, програма просить ввести їх повторно. Після успішної валідації профіль оновлюється.
Якщо введено будь-яку іншу команду, програма повідомляє про помилку і знову показує меню для повторного вибору. Таким чином реалізовано інтуїтивний і захищений від помилок інтерфейс роботи з користувачем у консолі.


3.1.8 Створення допоміжних функцій для вирівнювання таблиць застосунку
Під час розробки застосунку необхідно було створити функції, які б забезпечили вирівнювання тексту у таблицях (наприклад з продуктами чи кошиком) під час його відображення на консолі. Для цього були розроблені наступні три функції:
Функція utf8_strlen($str) рахує кількість символів у рядку, враховуючи, що символи можуть бути багатобайтними (наприклад, кирилиця). Стандартна strlen рахує байти, а не символи, тому у нашому консольному застосунку було використано регулярний вираз, який коректно визначає саме символи. Фрагмент коду наведений нижче:
 16 function utf8_strlen($str) {
 17     return preg_match_all('/./us', $str);
 18 }

Функція utf8_str_pad() є  аналогом функції str_pad, але працює з символами UTF-8. Вона додає зліва, справа або з обох боків до рядка символи, щоб загальна довжина рядка відповідала заданій. Це потрібно, щоб вирівняти текст у колонках при виводі в консоль. Фрагмент коду наведений нижче:


 20 function utf8_str_pad($input, $pad_length, $pad_string = ' ', $pad_type = STR_PAD_RIGHT) {
 21     $input_length = utf8_strlen($input);
 22     $diff = $pad_length - $input_length;
 23     if ($diff > 0) {
 24         if ($pad_type === STR_PAD_RIGHT) {
 25             return $input . str_repeat($pad_string, $diff);
 26         } elseif ($pad_type === STR_PAD_LEFT) {
 27             return str_repeat($pad_string, $diff) . $input;
 28         } elseif ($pad_type === STR_PAD_BOTH) {
 29             $left = floor($diff / 2);
 30             $right = $diff - $left;
 31             return str_repeat($pad_string, $left) . $input . str_repeat($pad_string, $right);
 32         }
 33     }
 34     return $input;
 35 }
Функція getMaxLengths() перебирає всі товари і визначає максимальну довжину символів для кожної з трьох колонок: ідентифікатора (id), назви (name) і ціни (price). Для підрахунку довжини викликає utf8_strlen, щоб врахувати особливості UTF-8. Фрагмент коду наведений нижче
 37 function getMaxLengths($products) {
 38     $maxId = utf8_strlen('№');
 39     $maxName = utf8_strlen('НАЗВА');
 40     $maxPrice = utf8_strlen('ЦІНА');
 41
 42     foreach ($products as $p) {
 43         $idLen = utf8_strlen((string)$p['id']);
 44         $nameLen = utf8_strlen($p['name']);
 45         $priceLen = utf8_strlen((string)$p['price']);
 46
 47         if ($idLen > $maxId) $maxId = $idLen;
 48         if ($nameLen > $maxName) $maxName = $nameLen;
 49         if ($priceLen > $maxPrice) $maxPrice = $priceLen;
 50     }
 51     return ['id' => $maxId, 'name' => $maxName, 'price' => $maxPrice];
 52 }
 53
3. 2 Тестування програми
Після розробки консольного застосунку “Продовольчий магазин Весна” слід ретельно протестувати створений функціонал та перевірити скрипт на коректну обробку помилок.
3.2.1 Тестування головного меню
Для запуску консольного застосунку будемо використовувати термінал. Введемо наступну команду для початку роботи скрипта:
 
./pzpi-23-3-kovalenko-violetta-task3.php


На консолі ми отримали головне меню з можливістю інтерактивного вибору дій (див. додаток Б, рис. Б.1) 
3.2.2 Тестування вибору товарів
При введені одиниці у термінал, користувач потрапляє у магазин, де має можливість додати до свого кошика товари, вказавши номер цього товару (див. додаток Б, рис. Б2). Також є можливість повернутися назад, якщо ввести нуль у термінал. При введені номера товару, якого не існує, користувачеві буде виведене наступне попередження: ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ
3.2.3 Тестування додавання та видалення товарів з кошику
Після вибору товару, користувачеві буде надана можливість обрати кількість товару (від 0 до 99), після чого товар буде доданий до кошика (див. додаток Б, рис. Б3). Якщо користувач введе 0, то обраний товар буде видалений з кошика. При введені кількості товару, яка не відповідає проміжку 0-99 , користувачеві буде виведене наступне попередження: ПОМИЛКА! Введіть кількість від 0 до 99
3.2.4 Тестування отримання підсумкового рахунку
Після того як користувач вибрав та додав до кошика всі необхідні товари, застосунком передбачена можливість переглянути кошик та отримати загальну суму всіх обраних товарів (див. додаток Б, Б4)
3.2.5 Тестування відображення та налаштування профілю
Застосунком також передбачення можливість налаштування та відображення профілю. Для цього користувач має обрати  та ввести 3 у головне меню застосунку, після чого йому буде надана можливість ввести своє ім’я (повинно містити хоча б одну літеру) та вік (повинен бути більший за 7 та менший ніж 150) (див. додаток Б, Б5). При введені невірних значень імені або віку, користувачеві будуть  виведені наступні попередження: ПОМИЛКА! Імʼя повинно містити хоча б одну літеру; ПОМИЛКА! Вік повинен бути від 7 до 150 років, відповідно.


Отже після проведення тестування можна сказати, що застосунок працює згідно зі всіма встановленими вимогами
________________
ВИСНОВКИ
Під час виконання лабораторної роботи №2 був розроблений  консольний застосунок «Продовольчий магазин "Весна"», з використанням мови PHP. Застосунок реалізує основні функції віртуального магазину з можливістю вибору товарів, додавання до кошика та видалення з нього, та навіть налаштування профілю. Після запуску користувач отримує доступ до меню з різними варіантами дій: вибір товарів, перегляд підсумкового рахунку, налаштування особистого профілю та завершення роботи програми. Програма передбачає перевірку коректності введених даних на кожному етапі взаємодії з користувачем. Виконання цього завдання сприяло закріпленню практичних умінь роботи з обробкою введених даних, побудовою логіки меню та організацією взаємодії у консольному інтерфейсі на мові PHP.
________________


ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/53bmnqOb3CQ
Хронологічний опис відеозапису:
00:00 – Представлення
00:14 – Тестування програми
01:24 – Початок пояснення коду
01:26 – Файл product.php та його вміст
01:40 – Функція require та її призначення
01:54 – Створення асоціативного масиву продуктів
02:23 – Створення порожнього кошику та профілю
02:40 – Створення функції utf8_strlen для підрахунку символів в рядку
02:57 – Створення функції utf8_str_pad, яка доповнює рядок символами
05:00 – Функція getMaxLengths, яка визначає максимальну довжину рядка
05:53 – Функція displayMainMenu, яка виводить головне меню інтерфейсу програми
06:10 – Функція displayProducts, яка відображає перелік доступних продуктів
07:33 – Функція displayCart, яка відображує вміст кошика
08:45 – Функція displayBill, яка виводить пісумкову вартість всіх товарів в кошику і самі товари
10:23 – Функції validateName та validateAge, які налаштовують профіль
10:49 – Основний цикл програми
12:39 – Завершення пояснення коду
________________


ДОДАТОК Б
Графічні матеріали
  

Рисунок Б.1 — Головне меню консольного застосунку
  

Рисунок Б.2 —  Вибір товарів магазину “Весна”
  

Рисунок Б.3 —  Додавання товарів у кошик (враховуючи кількість)
  

Рисунок Б.4 —  Отримання підсумкового рахунку
  

Рисунок Б.5 —  Налаштування профілю
________________
ДОДАТОК В
Програмний код
В.1 Функція для отримання підсумкової суми товарів в кошику
GitHub репозиторій: https://github.com/NureKovalenkoVioletta/smp-pzpi-23-3-kovalenko-violetta/blob/main/Lab2/smp-pzpi-23-3-kovalenko-violetta-lab2/smp-pzpi-23-3-kovalenko-violetta-lab2-code.php
106 function displayBill($cart, $products) {
107     if (empty($cart)) {
108         echo "КОШИК ПОРОЖНІЙ\n";
109         return;
110     }
111
112     $maxId = utf8_strlen('№');
113     $maxName = utf8_strlen('НАЗВА');
114     $maxPrice = utf8_strlen('ЦІНА');
115     $maxQty = utf8_strlen('КІЛЬКІСТЬ');
116     $maxCost = utf8_strlen('ВАРТІСТЬ');
117
118     foreach ($cart as $productId => $qty) {
119         if (!isset($products[$productId])) continue;
120
121         $p = $products[$productId];
122         $maxId = max($maxId, utf8_strlen((string)$p['id']));
123         $maxName = max($maxName, utf8_strlen($p['name']));
124         $maxPrice = max($maxPrice, utf8_strlen((string)$p['price']));
125         $maxQty = max($maxQty, utf8_strlen((string)$qty));
126         $cost = $p['price'] * $qty;
127         $maxCost = max($maxCost, utf8_strlen((string)$cost));
128     }
129
130     $maxId += 2; $maxName += 2; $maxPrice += 2; $maxQty += 2; $maxCost += 2;
131
132     echo utf8_str_pad('№', $maxId);
133     echo utf8_str_pad('НАЗВА', $maxName);
134     echo utf8_str_pad('ЦІНА', $maxPrice);
135     echo utf8_str_pad('КІЛЬКІСТЬ', $maxQty);
136     echo utf8_str_pad('ВАРТІСТЬ', $maxCost);
137     echo "\n";
138
139     $total = 0;
140     $i = 1;
141     foreach ($cart as $productId => $qty) {
142         if (!isset($products[$productId])) continue;
143
144         $p = $products[$productId];
145         $cost = $p['price'] * $qty;
146         $total += $cost;
147
148         echo utf8_str_pad((string)$i++, $maxId);
149         echo utf8_str_pad($p['name'], $maxName);
150         echo utf8_str_pad((string)$p['price'], $maxPrice);
151         echo utf8_str_pad((string)$qty, $maxQty);
152         echo utf8_str_pad((string)$cost, $maxCost);
153         echo "\n";
154     }
155     echo "РАЗОМ ДО CПЛАТИ: $total\n";
156 }
157
158 function validateName($name) {
159     return preg_match('/[a-zA-Zа-яА-Я]/u', $name);
160 }
161
162 function validateAge($age) {
163     return is_numeric($age) && $age >= 7 && $age <= 150;
164 }
165


В.2 Головний цикл програми
GitHub репозиторій: https://github.com/NureKovalenkoVioletta/smp-pzpi-23-3-kovalenko-violetta/blob/main/Lab2/smp-pzpi-23-3-kovalenko-violetta-lab2/smp-pzpi-23-3-kovalenko-violetta-lab2-code.php
167 while (true) {
168     displayMainMenu();
169     $choice = trim(fgets(STDIN));
170
171     switch ($choice) {
172         case '0':
173             exit("Дякуємо за використання програми!\n");
174
175         case '1':
176             while (true) {
177                 displayProducts($products);
178                 $productChoice = trim(fgets(STDIN));
179
180                 if ($productChoice === '0') {
181                     break;
182                 }
183
184                 if (!is_numeric($productChoice) || !isset($products[(int)$productChoice])) {
185                     echo "ПОМИЛКА! ВКАЗАНО НЕПРАВИЛЬНИЙ НОМЕР ТОВАРУ\n";
186                     continue;
187                 }
188
189                 $selectedProduct = $products[(int)$productChoice];
190                 echo "Вибрано: {$selectedProduct['name']}\n";
191                 echo "Введіть кількість, штук: ";
192                 $quantity = trim(fgets(STDIN));
193
194                 if (!is_numeric($quantity) || $quantity < 0 || $quantity >= 100) {
195                     echo "ПОМИЛКА! Введіть кількість від 0 до 99\n";
196                     continue;
197                 }
198
199                 if ($quantity === '0') {
200                     if (isset($cart[$selectedProduct['id']])) {
201                         unset($cart[$selectedProduct['id']]);
202                         echo "ВИДАЛЯЮ З КОШИКА\n";
203                     }
204                 } else {
205                     $cart[$selectedProduct['id']] = (int)$quantity;
206                 }
207
208                 displayCart($cart, $products);
209             }
210             break;
211
212         case '2':
213             if (empty($cart)) {
214                 echo "КОШИК ПОРОЖНІЙ\n";
215             } else {
216                 displayBill($cart, $products);
217             }
218             break;
219
220         case '3':
221             echo "Ваше імʼя: ";
222             $name = trim(fgets(STDIN));
223             while (!validateName($name)) {
224                 echo "ПОМИЛКА! Імʼя повинно містити хоча б одну літеру\n";
225                 echo "Ваше імʼя: ";
226                 $name = trim(fgets(STDIN));
227             }
228
229             echo "Ваш вік: ";
230             $age = trim(fgets(STDIN));
231             while (!validateAge($age)) {
232                 echo "ПОМИЛКА! Вік повинен бути від 7 до 150 років\n";
233                 echo "Ваш вік: ";
234                 $age = trim(fgets(STDIN));
235             }
236
237             $profile['name'] = $name;
238             $profile['age'] = (int)$age;
239             echo "Профіль успішно оновлено!\n";
240             break;
241
242         default:
243             echo "ПОМИЛКА! Введіть правильну команду\n";
244     }
245 }