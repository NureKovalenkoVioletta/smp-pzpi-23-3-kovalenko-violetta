Міністерство освіти та науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №1
з дисципліни «Скриптові мови програмування»
на тему: «Розробка Bash-скрипта»










Виконала        Перевірив: 
ст. гр. ПЗПІ-23-3        ст. викл. каф. ПІ
Коваленко В.О.        Сокорчук І.П.
















Харків, 2025 р.
________________
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	03.05.2025
	       0.1
	Додано розділ “Завдання”
	2
	05.045.2025
	28.  0.2
	Виправлено розділ “Завдання та додано розділ “Опис виконаної роботи”
	3
	07.05.2025
	2.1  0.3
	 Додано підрозділ “Хід роботи”
	4
	09.05.2025
	12.10.4
	Протестовано скрипт
	5
	09.05.2025
	10.10.5
	Додано “Додаток А”, “Додаток Б”, “Додаток В”
	________________


2 ЗАВДАННЯ
2.1 Постановка завдання
Розробити Bash-скрипт, який обробляє експортований із сайту https://cist.nure.ua/ розклад занять для всіх груп потоку в форматі CSV та перетворює його у формат CSV для завантаження в Google Календар https://support.google.com/.
2.2 Вимоги до скрипта
* Ім’я  скрипта: ~/{імʼя-облікового-запису}-task2
* Синтаксис виклику: {імʼя-облікового-запису}-task2 [--help | --version] | [[-q|--quiet] [академ_група] файл_із_cist.csv]
* Реалізація ключів: --help (довідка і завершення роботи), --version (інформація про версію і завершення), -q/--quiet (тихий режим без виводу)
* Обробка вхідних параметрів: академічна група (шаблон) та CSV-файл розкладу
* Інтерактивний вибір файлу (шаблон TimeTable_????20??.csv, сортування за датою від старіших до новіших), якщо не вказані група або файл
* Після вибору файлу — генерація списку академічних груп, сортування за алфавітом, інтерактивний вибір групи
* Фільтрація рядків за вибраною академічною групою
* Визначення порядкового номера заняття з урахуванням, що лабораторні роботи — 2 пари, решта — 1 пара
* Формування  поля «Subject» з поля «Тема» без назви групи та дефіса на початку
* Додавання порядкового номера заняття наприкінці теми через крапку з комою (наприклад: «опис заняття; №1»)
* Переформатування дати та часу у формат mm/dd/yyyy, HH:MM AM|PM відповідно до вимог Google Календаря (12-годинний формат)
* Заповнення поля «Description» текстом з поля «Опис (Описание)»
* Вивід відформатованих даних у стандартний потік, якщо не увімкнено тихий режим (-q/--quiet)
* Запис результату у новий CSV-файл з іменем Google_TimeTable????20??.csv, де ????_20?? — дата вхідного файлу
* Обробка помилок
________________


3 ОПИС ВИКОНАНОЇ РОБОТИ 
3.1 Хід роботи
Під час виконання лабораторної роботи №1 будемо покроково створювати Bash-скрипт, який задовільнить всі вимоги до завдання
3.1.1  Створення Bash-скрипта
Для виконання лабораторної роботи №1 знадобиться відповідний файл скрипта, де будуть прописані всі необхідні команди та функції для успішної обробки експортованого розкладу занять для всіх груп потоку в форматі CSV та перетворення його у формат CSV для завантаження в Google Календарі. Отже, використовуючи  touch в командному рядку прописуємо наступну команду:
touch pzpi-23-3-kovalenko-violetta-task2
3.1.2 Налаштування прав доступу скрипта
За умовами завдання скрипт повинен бути доступним для виконання для всіх користувачів, а  право редагувати файл скрипта повинен мати лише власник скрипта. Тому прописуємо наступні команди в командний рядок
chmod 755 pzpi-23-3-kovalenko-violetta-task1
chmod +x pzpi-23-3-kovalenko-violetta-task1
3.1.3 Створення основних змінних та констант
Для зручного зберігання даних та констант у коді були оголошені наступні змінні:


  1 #!/bin/bash
  2
  3 VERSION="1.0"
  4
  5 quiet_mode=false
  6 group_name=""
  7 input_file=""
  8
  9 # Error codes
 10 E_FILE_NOT_FOUND=1
 11 E_FILE_NOT_READABLE=2
 12 E_GROUP_NOT_FOUND=3
 13 E_PROCESSING_ERROR=4


Де змінна VERSION зберігає версію скрипта; змінна-флаг quiet_mode визначає, чи потрібно виводити поточний стан скрипта на консоль; змінні group_name та input_file у подальшому приймають значення групи та файлу, який повинен експортувати; змінні E_FILE_NOT_FOUND, E_FILE_NOT_READABLE, E_GROUP_NOT_FOUND, E_PROCESSING_ERROR  є кодовими помилками.
3.1.4 Створення функції про виведення помилок на консоль
Для виведення повідомлення про помилку та завершення роботи скрипта з певним кодом помилки була створена функція error_exit() . Вона приймає два параметри: перший — текст повідомлення про помилку, який виводиться в потік стандартних помилок (stderr), другий — числовий код помилки, який повертається операційній системі при завершенні скрипта.


 15 error_exit() {
 16     echo "Помилка: $1" >&2
 17     exit "$2"
 18 }


3.1.5 Створення допоміжних інформаційних функцій
Для створення гарного скрипта, який міститиме у собі допоміжну інформаційну були створені такі функції як:
Функції show_help(), show_version() та display_message() виконують допоміжні інформаційні ролі у скрипті (див. додаток В, В1).
* show_help() виводить користувачеві інструкцію з використання скрипта, описує доступні опції та параметри, після чого завершує роботу з кодом 0. 
* show_version() виводить поточну версію скрипта і також завершує роботу.
* display_message() відповідає за умовний вивід повідомлень залежно від режиму роботи скрипта (звичайний або тихий). Якщо режим "quiet" не активний, функція виводить переданий їй текст, що дозволяє контролювати рівень виводу інформації.
3.1.6 Створення функції, що забезпечує вибір файлу розкладу
За умови якщо користувач не ввів назву файлу, який він хоче, щоб був оброблений, була створена функція, що забезпечить цей функціонал. Функція select_file() (див. додаток В, В2 ) спочатку формує список доступних CSV-файлів, які відповідають заданому шаблону імені (починаються з "TimeTable_" і містять дату). Якщо таких файлів немає, викликає функцію error_exit() з відповідним повідомленням і кодом помилки.
3.1.7 Створення функції, що забезпечує вибір групи у файлі розкладу
За умови, якщо користувач не ввів групу, розклад якої він хоче отримати, була створена функція select_group() (див. додаток В, В3 ), що забезпечить  вибір академічної групи зі списку, отриманого з обраного файлу розкладу. Якщо у файлі виявлена лише одна група, вона автоматично присвоюється змінній для подальшої роботи, а користувач отримує відповідне повідомлення. Якщо груп декілька, функція виводить їх перелік і додає опцію «ВИХІД» для можливості завершення роботи. Якщо ж у файлі взагалі не знайдено груп, функція інформує про це та завершує роботу зі статусом помилки. 
3.1.8 Створення функції, що відповідає за конвертацію розкладу у формат , що підтримує Google Календар
Для конвертації вхідного файлу з  рокладом  у формат , що підтримує Google Календар була створена функція convert_to_google_calendar() (див. додаток В, В4). Нижче наведена послідовність за якою проходить преведення розкладу у належний формат:
Спершу функція витягує дату з імені вхідного файлу за допомогою регулярного виразу. Якщо це не вдається, викликається функція error_exit() з відповідним повідомленням та кодом помилки. Далі створюється новий вихідний CSV-файл із назвою, що містить дату, і записується заголовок колонок, необхідний для Google Календаря.
Далі відбувається послідовна обробка вхідного файлу: він конвертується із кодування CP1251 в UTF-8, замінюючи символи переносу рядка, а потім за допомогою AWK фільтруються записи для обраної групи та перетворюють формат дати з "дд.мм.рррр" у "мм/дд/рррр", а часу — з 24-годинного у 12-годинний формат з AM/PM. Також текстові поля видаляються від зайвих лапок.
Після цього відсортовані дані додатково обробляються AWK-скриптом, який нумерує лекції, практичні та лабораторні заняття окремо, додаючи номер до назви предмета, щоб розрізняти пари з однаковою назвою в різні дні або сесії. Лабораторні роботи, які складаються з двох пар,тому рахуються як одне заняття.
У разі помилок під час обробки викликається error_exit(). По завершенню успішної конвертації користувач отримує повідомлення з ім’ям створеного файлу.
3.1.9 Обробка аргументів командного рядка, які були передані скрипту при запуску
Для обробки параметрів, які були передані користувачем через командний рядок був реалізований наступний фрагмент коду (див. додаток В, В4). Для кожного аргументу у списку параметрів ("$@") виконується перевірка за допомогою конструкції case:
* Якщо аргумент дорівнює --help, викликається функція show_help(), яка виводить інструкцію по використанню скрипта, після чого аргумент видаляється зі списку.
* Якщо аргумент --version, викликається функція show_version() для показу версії скрипта, і аргумент також видаляється.
* Якщо аргумент дорівнює -q або --quiet, встановлюється прапорець quiet_mode=true, що переводить скрипт у тихий режим виводу, після чого аргумент видаляється.
* Якщо аргумент не збігається з вказаними опціями, виконується додаткова перевірка: якщо змінна input_file ще не задана і аргумент відповідає існуючому файлу, він зберігається як вхідний файл; якщо змінна group_name ще порожня і аргумент відповідає шаблону назви академічної групи (формат на кшталт "ПЗПІ-xx-x"), він зберігається як ім’я групи.
3.2 Тестування програми
Після написання скрипту слід перевірити коректність виконання роботи
3.2.1  Перевірка обробки вхідних параметрів
         У ході запуску скрипта, було протестоване коректне розпізнавання та обробка параметрів командного рядка, а саме:
* виклик довідки (--help) та версії (--version),
* активація тихого режиму (-q, --quiet),
* задання файлу розкладу та назви академічної групи. Було перевірено коректне завершення програми після виводу довідки і версії, а також коректне збереження параметрів.
3.2.2 Валідація файлу розкладу
        Скрипт коректно перевіряє існування файлу та права на читання, виводячи відповідні помилки у разі проблем.
3.2.3   Вибір файлу розкладу у разі відсутності параметра
        При запуску без параметра файлу реалізовано інтерактивний вибір файлу зі списку, відфільтрованого за шаблоном імені. 
3.2.4  Вибір академічної групи
        Перевірено автоматичний вибір, якщо група одна, та інтерактивний вибір зі списку, а також обробку ситуацій відсутності груп.
3.2.5 Обробка помилок
        При некоректних вхідних даних (відсутність файлу, неправильно вказана група, помилки форматування) скрипт коректно виводить повідомлення про помилки і завершує роботу з відповідним кодом.


ВИСНОВКИ
Під час виконання лабораторної роботи було створено Bash-скрипт, який конвертує CSV-файл з розкладом занять із системи CIST у формат, сумісний з імпортом до Google Календаря. Скрипт коректно опрацьовує параметри командного рядка, дозволяє вибирати файл та академічну групу інтерактивно, фільтрує дані за обраною групою, форматуючи дати та час згідно з вимогами Google Календаря. Він також правильно нумерує заняття, враховуючи специфіку лабораторних пар, та зберігає результат у новий CSV-файл. Проведені тестування підтвердили стабільну роботу скрипта в різних сценаріях, включно з коректною обробкою помилок при відсутності файлу або групи. 
________________


ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://www.youtube.com/watch?v=zRnfYsCj550
Хронологічний опис відеозапису:
00:00 – Представлення
00:39 – Перевірка роботи скрипта
01:10 – Імпортування файлу до Google календаря
01:29 – Початок пояснення скрипта
01:35 – Визначення необхідних змінних
01:56 – Визначення констант, які відповідають за кодові помилки
02:14 – Функція error_exit для виведення сповіщення про помилку і саму кодову помилку
02:32 – Функція check_file яка перевіряє наявніть та читаємість файлу
03:02 – Функція show_help, яка виконує інформаційну роль для користувача
03:35 – Функція show_version, яка визначає версію скрипта
03:43 – Функція display_message, яка виводить поточну інформацію виконання скрипта у термінал
04:05 – Функція  select_file, яка надає користувачеві обрати файл для конвертування
05:31 – Функція get_groups_from_file, яка витягує наявні групи з файлу
07:35 – Функція select_group, яка надає користувачеві обрати групу у вибраному файлі
08:33 – Функція check_group_exists, яка перевіряє наявність певної групи у певному файлі
09:48 – Функція convert_to_google_calendar, яка конвертує вхідні дані файлу у вихідний файл, який підтримує формат csv для Google календаря
16:24 – Фрагмент коду, який обробляє передані аргументи командного рядка
16:50 – Фрагмент коду, який перевіряє та обробляє вхідний файл
17:01 – Фрагмент коду, який займається перевіркою обраної групи та її існування у списку доступних груп
17:20 – Виклик функції convert_to_google_calendar
________________


ДОДАТОК Б
Графічні матеріали
Відсутні
________________


ДОДАТОК В
Програмний код
В.1 Допоміжні інформаційні функції скрипта
GitHub репозиторій: https://github.com/NureKovalenkoVioletta/smp-pzpi-23-3-kovalenko-violetta/blob/main/Lab1/smp-pzpi-23-3-kovalenko-violetta-lab1/smp-pzpi-23-3-violetta-kovalenko-lab1-code.sh
 30 show_help() {
 31     echo "Використання:"
 32     echo "task2 [--help | --version] | [[-q|--quiet] [академ_група] файл_із_cist.csv]"
 33     echo "Опції:"
 34     echo "  --help       Показати це повідомлення допомоги"
 35     echo "  --version    Показати інформацію про версію"
 36     echo "  -q, --quiet  Підпригнути вивід у стандартний потік"
 37     echo "Параметри:"
 38     echo "  академ_група     Назва академічної групи (шаблон)"
 39     echo "  файл_із_cist.csv  Експортований CSV файл розкладу"
 40     exit 0
 41 }
 42
 43 show_version() {
 44     echo "Версія скрипта: $VERSION"
 45     exit 0
 46 }
 47
 48 display_message() {
 49     if [ "$quiet_mode" = false ]; then
 50         echo "$1"
 51     fi
 52 }
 53
В.2 Функція, що забезпечує вибір файлу розкладу
GitHub репозиторій: https://github.com/NureKovalenkoVioletta/smp-pzpi-23-3-kovalenko-violetta/blob/main/Lab1/smp-pzpi-23-3-kovalenko-violetta-lab1/smp-pzpi-23-3-violetta-kovalenko-lab1-code.sh
 54 select_file() {
 55     files=($(ls -t | grep -E '^TimeTable_.._.._20..\.csv'))
 56
 57     if [ ${#files[@]} -eq 0 ]; then
 58         error_exit "Файли розкладу, що відповідають шаблону, не знайдені." $E_FILE_NOT_FOUND
 59     fi
 60
 61     display_message "Доступні файли розкладу:"
 62
 63     files+=('ВИХІД')
 64
 65     select choice in "${files[@]}"; do
 66         if [ "$choice" = 'ВИХІД' ]; then
 67             exit 0
 68         elif [ -n "$choice" ]; then
 69             input_file="$choice"
 70             check_file "$input_file"
 71             break
 72         else
 73             display_message "Неправильний вибір. Спробуйте ще раз."
 74         fi
 75     done
 76 }
В.3 Функція, що забезпечує вибір групи
GitHub репозиторій: https://github.com/NureKovalenkoVioletta/smp-pzpi-23-3-kovalenko-violetta/blob/main/Lab1/smp-pzpi-23-3-kovalenko-violetta-lab1/smp-pzpi-23-3-violetta-kovalenko-lab1-code.sh


89 select_group() {
 90     display_message "Витягуємо групи з файлу: $input_file"
 91
 92     display_message "Знайдено ${#groups[@]} груп у файлі"
 93
 94     if [ ${#groups[@]} -eq 1 ]; then
 95         group_name="${groups[0]}"
 96         display_message "Знайдена лише одна група: $group_name. Вибір виконано автоматично."
 97     elif [ ${#groups[@]} -gt 1 ]; then
 98         display_message "Доступні групи:"
 99         groups+=('ВИХІД')
100
101         select choice in "${groups[@]}"; do
102             if [ "$choice" = 'ВИХІД' ]; then
103                 exit 0
104             elif [ -n "$choice" ]; then
105                 group_name="$choice"
106                 display_message "Обрана група: $group_name"
107                 break
108             else
109                 display_message "Неправильний вибір. Спробуйте ще раз."
110             fi
111         done
112     else
113         display_message "У вибраному файлі групи не знайдено."
114         exit 1
115     fi
116 }
117






В.4 Функція, що відповідає за конвертацію розкладу у формат , що підтримує Google Календар
GitHub репозиторій: https://github.com/NureKovalenkoVioletta/smp-pzpi-23-3-kovalenko-violetta/blob/main/Lab1/smp-pzpi-23-3-kovalenko-violetta-lab1/smp-pzpi-23-3-violetta-kovalenko-lab1-code.sh


139 convert_to_google_calendar() {
140     if ! date_from_filename=$(echo "$input_file" | grep -o '[0-9]\{2\}_[0-9]\{2\}_20[0-9]\{2\}'); then
141         error_exit "Не вдалося визначити дату з імені файлу" $E_PROCESSING_ERROR
142     fi
143
144     output_file="Google_TimeTable_${date_from_filename}.csv"
145     echo "Subject,Start Date,Start Time,End Date,End Time,Description" > "$output_file" || error_exit "Не вдалося створити вихідний файл" $E_PROCESSING_ERROR
146
147     display_message "Обробляємо групу: $group_name"
148
149     if ! iconv -f cp1251 -t UTF-8 "$input_file" | sed 's/\r/\n/g' | awk -v group="$group_name" -v single_group="$num_groups" '
150     BEGIN {
151         FPAT="([^,]*|\"[^\"]*\")"
152     }
153
154     function clean_quotes(str) {
155         gsub(/^"/, "", str)
156         gsub(/"$/, "", str)
157         gsub(/"/, "", str)
158         return str
159     }
160
161     function convert_date(str) {
162         str = clean_quotes(str)
163         split(str, d, ".")
164         return sprintf("%02d/%02d/%04d", d[2], d[1], d[3])
165     }
166
167     function convert_time(str) {
168         str = clean_quotes(str)
169         split(str, t, ":")
170         h = t[1] + 0
171         m = t[2]
172         ampm = (h >= 12) ? "PM" : "AM"
173         if (h > 12) h -= 12
174         if (h == 0) h = 12
175         return sprintf("%02d:%s %s", h, m, ampm)
176     }
177
178     NR > 1 {
179         if (single_group == 1 || $1 ~ group) {
180             subject = $1
181             sub(/^"[^"]* - /, "", subject)
182             sub(/"$/, "", subject)
183             subject = clean_quotes(subject)
184
185             start_date = convert_date($2)
186             end_date = convert_date($4)
187
188             start_time = convert_time($3)
189             end_time = convert_time($5)
190
191             description = clean_quotes($12)
192
193             entries[NR] = sprintf("%s|%s|%s|%s|%s|%s|%s",
194                 subject,
195                 start_date,
196                 start_time,
197                 end_date,
198                 end_time,
199                 description,
200                 $1)
201         }
202     }
203
204     END {
205         for (i in entries) print entries[i]
206     }
207     ' | sort -t'|' -k2,2 -k3,3 | awk -F'|' '
208     BEGIN {
209         delete lecture_count; delete practice_count; delete lab_count
210         prev_subject = ""; prev_date = ""; prev_number = 0
211     }
212     {
213         subject = $1
214         start_date = $2
215         start_time = $3
216         end_date = $4
217         end_time = $5
218         description = $6
219         original_subject = $7
220
221         subject_name = subject
222         sub(/ .*$/, "", subject_name)
223
224         if (!(subject_name in lecture_count)) {
225             lecture_count[subject_name] = 0
226             practice_count[subject_name] = 0
227             lab_count[subject_name] = 0
228         }
229
230         if (subject ~ /Лк/) {
231             lecture_count[subject_name]++
232             subject = subject "; №" lecture_count[subject_name]
233         } else if (subject ~ /Пз/) {
234             practice_count[subject_name]++
235             subject = subject "; №" practice_count[subject_name]
236         } else if (subject ~ /Лб/) {
237             if (subject_name == prev_subject && start_date == prev_date) {
238                 subject = subject "; №" prev_number
239             } else {
240                 lab_count[subject_name]++
241                 subject = subject "; №" lab_count[subject_name]
242                 prev_number = lab_count[subject_name]
243             }
244             prev_subject = subject_name
245             prev_date = start_date
246         }
247
248         printf "\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"\n",
249             subject,
250             start_date,
251             start_time,
252             end_date,
253             end_time,
254             description
255     }
256     ' >> "$output_file"; then
257         error_exit "Помилка при обробці файлу" $E_PROCESSING_ERROR
258     fi
259
260     display_message "Розклад було конвертовано і збережено у файлі $output_file"
261 }
262
________________