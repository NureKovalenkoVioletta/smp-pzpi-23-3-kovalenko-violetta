Міністерство освіти та науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №3
з дисципліни «Скриптові мови програмування»
на тему: «Розробка веб-застосунку з використанням php»










Виконала        Перевірив: 
ст. гр. ПЗПІ-23-3        ст. викл. каф. ПІ
Коваленко В.О.        Сокорчук І.П.
















Харків, 2025 р.
________________
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	15.05.2025
	       0.1
	Додано розділ “Завдання”
	2
	17.05.2025
	28.  0.2
	Виправлено розділ “Завдання та додано розділ “Опис виконаної роботи”
	3
	17.05.2025
	2.1  0.3
	 Додано підрозділ “Хід роботи”
	4
	19.05.2025
	12.10.4
	додано підрозділ “Тестування веб-застосунку”
	5
	20.05.2025
	10.10.5
	Додано “Додаток А”, “Додаток Б”, “Додаток В”
	________________


2 ЗАВДАННЯ
2.1 Постановка завдання
У ході третьої лабораторної роботи необхідно розробити веб-застосунок на тему: “Продовольчий магазин Весна” з використанням php та бази даних sqlite
2.2 Вимоги до застосунку
Застосунок повинен складатися з наступних сторінок:
* Сторінка товарів. На сторінці товарів необхідно відобразити список доступних для покупки найменувань з можливістю вибрати кількість одиниць товарів і кнопкою «купити». Під час натискання на кнопку «купити», має відправлятися запит (відправка форми, методом POST) на сервер, де дані зберігаються в сесію. 
*  Сторінка «Кошик». На сторінці «Кошик» необхідно відобразити список обраних користувачем товарів (які були збережені у сесію). Якщо ви ще не обрали жодного товару, то має бути відображений напис «Перейти до покупок» (посилання).
* Головна сторінка. На головній сторінці необхідно розмістити запрошення до веб-магазину та відповідні кнопки для переходу на сторінку з товарами та на сторінку з кошиком
Кожна сторінка має складатися з таких частин: 1. «Шапка» сторінки, 2. Тіло сторінки. 3. «Підвал» або Footer сторінки.
________________
3 ОПИС ВИКОНАНОЇ РОБОТИ 
3.1 Хід роботи
Під час виконання лабораторної роботи №3 був створений веб-застосунок, який відповідає 
3.1.1 Ініціалізація бази даних
Для ініціалізації та створення бази даних SQLite був написаний відповідний код з використанням php, який зберігається у файлі init_db.php. Скрипт перевіряє наявність файлу бази даних, і якщо він ще не існує, створює його, а також наповнює таблицю товарами. Код скрипта наведений у додатку В, В1
Перше, що робить цей скрипт- перевіряє, чи існує вже файл бази даних. Якщо файл бази даних вже є, скрипт виводить повідомлення про це і припиняє свою роботу(див. Додаток В, В1 ряд 4-7).
Далі скрипт містить з підключення до бази даних. Для цього використовується клас PDO, який дозволяє працювати з базою даних SQLite. Після підключення встановлюється режим обробки помилок(див. Додаток В, В1 ряд 9-11).
Наступним кроком є створення таблиці для зберігання товарів. Таблиця містить такі поля, як ідентифікатор товару, його назва, ціна та зображення. Запит на створення таблиці виконується лише в тому випадку, якщо таблиця ще не існує(див. Додаток В, В1 ряд 13-20).
Далі скрипт наповнює таблицю товарами. Для цього створюється масив з даними про товари, кожен з яких містить назву, ціну та посилання на зображення. Ці дані вставляються в таблицю через відповідний запит(див. Додаток В, В1 ряд 22-39).
В кінці скрипт виводить повідомлення про успішне завершення роботи, якщо всі операції пройшли без помилок, а якщо ж виникла якась проблема, то скрипт виводить відповідне повідомлення(див. Додаток В, В1 ряд 36-45).


3.1.2 Створення сторінки з товарами
Для відображення користувачеві списку товарів на веб-сторінці, з можливістю додавання їх у кошик, був створений файл index.php з використанням php. Код скрипта наведений у додатку В, В2
Спочатку скрипт підключає заголовок сторінки через require_once 'includes/header.php', що дозволяє використовувати загальний хедер для всіх сторінок веб-застосунку(див. Додаток В, В2 ряд. 2).
Далі ми ініціалізуємо змінну $error порожньою строкою і використовуємо для зберігання повідомлень про помилки, якщо введені дані не відповідають вимогам. Потім викликається функція getProducts(), яка отримує масив товарів з бази даних.
Далі скрипт перевіряє, чи був здійснений POST-запит. Якщо запит є, то ініціалізується змінна $hasError як false, щоб відслідковувати можливі помилки в процесі перевірки кількості товарів. Далі ми проходимося в циклі foreach ($_POST['quantity'] as $productId => $quantity), де відбувається перевірка кожного введеного значення кількості товару. Для кожного товару, якщо кількість більша за нуль, перевіряється, чи правильне значення через функцію validateQuantity. Якщо значення некоректне, виводиться відповідне повідомлення та помилка.Якщо помилок немає, то наступний цикл знову перебирає товари і додає їх у кошик через функцію addToCart, якщо кількість більша за нуль. Після цього відбувається редирект на сторінку кошика за допомогою header('Location: basket.php') і виконується exit, щоб припинити виконання скрипта (див. Додаток В, В2 ряд. 7-28). 
Якщо ж була виявлена помилка, то значення змінної $error змінюється на повідомлення, яке буде виведено на сторінці.
Далі відображається HTML-розмітка:
* Заголовок сторінки:Товари.
* Якщо змінна $error не порожня, то виводиться блок з повідомленням про помилку у вигляді елемента <div class="error">
* Форма для відправки даних містить HTML-елементи, що відповідають за відображення товарів у вигляді карток (див. Додаток В, В2 ряд. 31-61).
І останнє - це кнопка відправки форми. Коли користувач натискає на неї, форма відправляється методом POST на поточну сторінку, і вся логіка обробки даних, виконується знову(див. Додаток В, В2 ряд. 63-66).
В кінці файлу підключається футер сторінки через require_once 'includes/footer.php;, що закриває HTML-документ.(див. Додаток В, В2 ряд. 68)
3.1.3 Створення сторінки з кошиком
Для відображення користувацького кошику та можливістю видалення товарів з кошика був створений файл basket.php. Код скрипта наведений у додатку В, В3
Спочатку підключаємо заголовок сторінки через require_once 'includes/header.php'; що дозволяє використовувати загальний хедер для всіх сторінок веб-застосунку(див. Додаток В, В3 ряд. 2).
Далі перевіряємо наявність параметра remove в URL, що вказує на те, чи користувач хоче видалити товар з кошика. Якщо параметр remove присутній в запиті, то видаляємо відповідний товар з кошика(див. Додаток В, В3 ряд. 4-9).
Якщо параметр remove відсутній, то продовжуємо виконання скрипта, в якому отримуються товари в кошику через функцію getCartProducts() та загальна сума кошика через getCartTotal()(див. Додаток В, В3 ряд. 11-12).
Далі виводимо HTML-контент:
* Якщо кошик порожній (тобто масив $cartProducts порожній), на сторінці виводиться повідомлення про порожній кошик разом із кнопкою, яка веде на головну сторінку для продовження покупок(див. Додаток В, В3 ряд. 17-21).
* Якщо кошик не порожній, виводиться таблиця з товарами в кошику. Кожен товар в таблиці має: назву товару, ціну товару, відформатовану через функцію formatPrice(), кількість товару, яку користувач додав у кошик, загальну суму за цей товар (ціна * кількість), також відформатовану через formatPrice(), кнопку "Видалити", яка веде на ту ж саму сторінку з параметром ?remove=<id>, що дозволяє видалити відповідний товар з кошика(див. Додаток В, В3 ряд. 22-49).
* Внизу таблиці відображаємо загальна сума кошика, яка обчислюється через функцію formatPrice($cartTotal)(див. Додаток В, В3 ряд. 51-55).
* Якщо в кошику є товари, виводиться кнопка "Продовжити покупки", яка веде на головну сторінку для вибору нових товарів.
В кінці файлу підключаємо футер через require_once 'includes/footer.php';, що завершить HTML-документ.
3.1.4 Створення головної сторінки
Для відображення головної сторінки продовольчого магазину "Весна" був створений файл home.php. Він включає HTML-контент, що вітає користувачів у магазині , а також надає їм можливість почати покупки або перейти до кошика. Код скрипта наведений у додатку В, В4
Отже, спершу ми підключаємо заголовок сторінки через require_once 'includes/header.php';.Далі йде основний вміст сторінки у якому міститься текст, який вітає користувачів у магазині та пропонує перейти до списку товарів або кошику. У кінці файлу підключаємо футер через require_once 'includes/footer.php'.
3.1.5 Створення header та footer
Для відображення header та footer на всіх сторінках веб-застосунку були розроблені наступні фрагменти коду(див. Додаток В, В5 та Додаток В, В6)
3.1.6 Створення файлу з допоміжними функціями 
Для того аби зручно працювати з базою даних і забезпечувати функціональність для роботи з кошиком покупок, продуктами та іншими аспектами магазину був створений окремий файл functions.php, у якому зберігаються всі необхідні функції. Розглянемо кожну з функцій окремо:
1. getDbConnection() Ця функція відповідає за підключення до бази даних SQLite. Спочатку перевіряється, чи є вже з'єднання . Якщо з'єднання ще не було створене, то здійснюється підключення до бази даних. Якщо з'єднання не вдається встановити, то викликаємо виключення, і на екран виводиться повідомлення про помилку.
2. getProducts()Ця функція отримує всі продукти з бази даних. Спочатку викликається функція getDbConnection() для отримання з'єднання з базою даних. Далі виконується SQL-запит для отримання всіх товарів з таблиці products.Результати запиту зберігаються в асоціативному масиві через метод fetchAll і повертаються з функції.
3. getProductById($id) Ця функція отримує конкретний товар з бази даних за його ідентифікатором. Вона використовує функцію getDbConnection() для отримання з'єднання з базою даних. Підготовлений запит вибирає товар за його ідентифікатором з таблиці products. Запит виконується через метод execute(), а результат повертається як асоціативний масив за допомогою методу fetch.
4. initCart() Ця функція ініціалізує кошик покупок. Спочатку перевіряється, чи існує сесійна змінна $_SESSION['cart'], що відповідає за збереження товарів у кошику. Якщо змінна не існує, створюється порожній масив для кошика, щоб зберігати продукти, які користувач додає до кошика.
5. addToCart() Ця функція додає товар у кошик. Спочатку викликається функція initCart(), щоб переконатися, що кошик ініціалізовано. Перевіряється, чи вже є товар з таким ідентифікатором у кошику ($_SESSION['cart'][$productId]). Якщо товар вже є в кошику, до існуючої кількості додається нова кількість товару. Якщо товару в кошику ще немає, він додається в масив з вказаною кількістю.
6. removeFromCart($productId) Ця функція видаляє товар з кошика. Перевіряється, чи існує товар з вказаним ідентифікатором у кошику. Якщо товар є, він видаляється з масиву $_SESSION['cart'] за допомогою функції unset().
7. getCartProducts() Ця функція повертає всі продукти, що знаходяться в кошику, разом з кількістю та загальною сумою для кожного товару. Перевіряється, чи не порожній кошик (чи існують продукти в $_SESSION['cart']). Для кожного товару в кошику отримується його інформація з бази даних через функцію getProductById(). Для кожного товару обчислюється його загальна сума (ціна * кількість) і додається до масиву $cartProducts. Повертається масив усіх товарів з інформацією про кількість і суму.
8. getCartTotal() Ця функція обчислює загальну суму всіх товарів у кошику. Використовує функцію getCartProducts(), щоб отримати всі продукти в кошику з їхніми сумами. Проходить через кожен товар і додає його суму до загальної суми $total. Повертає загальну суму кошика.
9. validateQuantity() Ця функція перевіряє, чи є введена кількість товару числовим значенням і чи є вона більшою за нуль. Якщо кількість є числом і більша за нуль, функція повертає true, в іншому випадку — false.
10. formatPrice($price). Ця функція форматуватує ціну товару. Спочатку вона використовує функцію number_format() для форматування числа до двох десяткових знаків, а потім повертає відформатовану ціну як рядок, готову для відображення на сторінці.
3.2 Тестування веб-застосунку
Після розробки нашого застосунку його необхідно протестувати, аби впевнитися, що весь функціонал працює та відповідає вимогам завдання
3.2.1 Запускаємо застосунок на localhost
Для запуску нашої програми відкриваємо командний рядок та прописуємо наступну команду: php -S localhost:8000 Ця команда запускає нашу програму на локальному хості 
3.2.2 Головна сторінка
Після запуску програми нам відкривається головна сторінка із загальною інформацією про продовольчий магазин “Весна”. Також на цій сторінці є можливість перейти до покупок або до кошику. Графічне відображення головної сторінки у додатку Б, Б1
3.2.3 Відображення товарів
Після того, як користувач перейшов на сторінку товарів у нього є можливість переглядати ці товари,а також додавати у свій кошик, вказуючи кількість.  Графічне відображення сторінки товарів у додатку Б, Б2. Також у додатку Б, Б3 відображена можливість додавання продуктів у кошик
3.2.4 Відображення кошику
Після того, як користувач здійснив необхідні додавання продуктів у кошик, він може перейти у свій кошик та пересвідчитися, що всі товари додані, а також побачити загальну вартість усіх продуктів. Також користувач може видалити продукти за необхідністю. Графічне відображення сторінки кошику додатку Б, Б4.
3.2.5 Результати тестування програми
Таким чином ми повністю протестували нашу програму та пересвідчились у її правильності виконання
________________
4 ВИСНОВКИ
У результаті виконаної роботи було створено веб-застосунок, який реалізує необхідний функціонал, зокрема обробку запитів користувачів через PHP, а також взаємодію з формами та сесіями. У процесі роботи отримані практичні навички з роботи з POST-запитами, валідацією даних і обробкою помилок при додаванні товарів у кошик.Проект повністю відповідає вимогам лабораторної роботи №3.
________________
ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/ZNgsmtgExU4
Хронологічний опис відеозапису:
00:00 – Представлення
00:14 – Тестування програми
01:23–  Початок пояснення коду + початок розбору коду у файлі init_db.php
02:26 – SQL запит на створення таблиці бази даних
03:13 – Розбір коду у файлі functions.php
03:29 – Функція getDbConnection, яка встановлює з'єднання до бази даних
04:10 – Функція getProducts, яка витягує вся товари з таблиці у базі даних
04:45 – Функція getProductsById, яка витягує певний продукт з таблиці у базі даних за його Id
05:22 – Функція initCart, яка ініціалізує кошик
05:44 – Функція addToCart, яка додає до кошика продукти
06:10 – Функція removefromCart, яка видаляє продукти  кошика
06:28 – Функція getCartProducts, яка отримує всі продукти з кошика
07:07 – Функція getCartTotal, яка обчислює загальну суму продуктів у кошику
07:33 – Функція ValidateQuantity, яка перевіряє, чи правильна введена кількість продуктів
07:43 – Функція FormatPrice, яка відформатовує ціну, залишаючи два знаки після коми
08:07 – Розбір коду у файлі index.php
10:38 – Розбір коду у файлі backet.php
12:24 – Розбір коду у файлі home.php
12:49 – Розбір коду у файлі header.php
13:13 – Розбір коду у файлі footer.php
________________
ДОДАТОК Б
Графічні матеріали
  

Рисунок Б.1 — Головна сторінка
  

Рисунок Б.2 — Сторінка з доступними товарами у магазині
________________


  

Рисунок Б.3 — Додавання продуктів до кошику
  

Рисунок Б.4 — Вміст кошику користувача
________________
ДОДАТОК В
Програмний код
В.1  Код для створення та ініціалізації бази даних
GitHub репозиторій: 
  1 <?php
  2 $dbFile = __DIR__ . '/webshop.sqlite';
  3
  4 if (file_exists($dbFile)) {
  5     echo "Database already exists at {$dbFile}\n";
  6     exit;
  7 }
  8
  9 try {
 10     $db = new PDO('sqlite:' . $dbFile);
 11     $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
 12
 13     $db->exec("
 14         CREATE TABLE IF NOT EXISTS products (
 15             id INTEGER PRIMARY KEY AUTOINCREMENT,
 16             name TEXT NOT NULL,
 17             price REAL NOT NULL,
 18             image TEXT NOT NULL
 19         );
 20     ");
 21
 22     $products = [
 23         ['name' => "Молоко пастеризоване", "price" => 18.00, "image" => "milk.png"],
 24         ['name' => "Хліб чорний", "price" => 13.50, "image" => "bread.png"],
 25         ['name' => "Сир білий", "price" => 31.50, "image" => "cheese.png"],
 26         ['name' => "Сметана 20%", "price" => 37.50, "image" => "sour-cream.png"],
 27         ['name' => "Кефір 1%", "price" => 28.50, "image" => "kefir.png"],
 28         ['name' => "Яйця курячі (10 шт)", "price" => 42.00, "image" => "eggs.png"],
 29         ['name' => "Олія соняшникова", "price" => 78.00, "image" => "oil.png"],
 30         ['name' => "Ковбаса варена", "price" => 111.00, "image" => "sausage.png"],
 31         ['name' => "Макарони", "price" => 27.00, "image" => "pasta.png"],
 32         ['name' => "Крупа гречана", "price" => 52.50, "image" => "buckwheat.png"],
 33         ['name' => "Йогурт фруктовий", "price" => 25.50, "image" => "yogurt.png"]
 34     ];
 35
 36     $stmt = $db->prepare("INSERT INTO products (name, price, image) VALUES (?, ?, ?)");
 37     foreach ($products as $product) {
 38         $stmt->execute([$product['name'], $product['price'], $product['image']]);
 39     }
 40
 41     echo "Database created and products inserted successfully at {$dbFile}\n";
 42 } catch (PDOException $e) {
 43     echo "Error: " . $e->getMessage() . "\n";
 44     exit(1);
 45 }
 46 ?>

В.2  Код для створення сторінки відображення товарів
GitHub репозиторій: 
  1 <?php
  2 require_once 'includes/header.php';
  3
  4 $error = '';
  5 $products = getProducts();
  6
  7 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  8     $hasError = false;
  9
 10     foreach ($_POST['quantity'] as $productId => $quantity) {
 11         if ($quantity > 0 && !validateQuantity($quantity)) {
 12             $hasError = true;
 13             break;
 14         }
 15     }
 16
 17     if (!$hasError) {
 18         foreach ($_POST['quantity'] as $productId => $quantity) {
 19             if ($quantity > 0) {
 20                 addToCart($productId, (int)$quantity);
 21             }
 22         }
 23         header('Location: basket.php');
 24         exit;
 25     } else {
 26         $error = 'Будь ласка, перевірте введені значення.';
 27     }
 28 }
 29 ?>
 30
 31 <h1>Товари</h1>
 32
 33 <?php if ($error): ?>
 34     <div class="error"><?php echo h($error); ?></div>
 35 <?php endif; ?>
 36
 37 <form method="POST" action="">
 38     <div class="products-grid">
 39         <?php foreach ($products as $product): ?>
 40             <div class="product-card">
 41                 <div class="product-image-container">
 42                     <img src="/assets/images/<?php echo h($product['image']); ?>"
 43                          alt="<?php echo h($product['name']); ?>"
 44                          class="product-image">
 45                 </div>
 46                 <div class="product-info">
 47                     <h3 class="product-name"><?php echo h($product['name']); ?></h3>
 48                     <p class="product-price"><?php echo formatPrice($product['price']); ?> ₴</p>
 49                     <div class="product-quantity">
 50                         <label for="quantity-<?php echo $product['id']; ?>">Кількість:</label>
 51                         <input type="number"
 52                                id="quantity-<?php echo $product['id']; ?>"
 53                                name="quantity[<?php echo $product['id']; ?>]"
 54                                value="<?php echo isset($_POST['quantity'][$product['id']]) ? h($_POST['quantity'][$product['id']]) : '0'; ?>"
 55                                min="0"
 56                                required>
 57                     </div>
 58                 </div>
 59             </div>
 60         <?php endforeach; ?>
 61     </div>
 62
 63     <div class="form-actions">
 64         <button type="submit">Додати до кошика</button>
 65     </div>
 66 </form>
 67
 68 <?php require_once 'includes/footer.php'; ?>
 
В.3  Код для створення сторінки відображення товарів в кошику
GitHub репозиторій: 
 
  1 <?php
  2 require_once 'includes/header.php';
  3
  4 if (isset($_GET['remove'])) {
  5     $productId = (int)$_GET['remove'];
  6     removeFromCart($productId);
  7     header('Location: basket.php');
  8     exit;
  9 }
 10
 11 $cartProducts = getCartProducts();
 12 $cartTotal = getCartTotal();
 13 ?>
 14
 15 <h1>Кошик</h1>
 16
 17 <?php if (empty($cartProducts)): ?>
 18     <div class="empty-cart">
 19         <p>Ваш кошик порожній.</p>
 20         <a href="index.php" class="button">Перейти до покупок</a>
 21     </div>
 22 <?php else: ?>
 23     <table class="basket">
 24         <thead>
 25             <tr>
 26                 <th>Товар</th>
 27                 <th>Ціна</th>
 28                 <th>Кількість</th>
 29                 <th>Сума</th>
 30                 <th>Дія</th>
 31             </tr>
 32         </thead>
 33         <tbody>
 34             <?php foreach ($cartProducts as $product): ?>
 35                 <tr>
 36                     <td><?php echo h($product['name']); ?></td>
 37                     <td><?php echo formatPrice($product['price']); ?> ₴</td>
 38                     <td><?php echo h($product['quantity']); ?></td>
 39                     <td><?php echo formatPrice($product['total']); ?> ₴</td>
 40                     <td>
 41                         <a href="?remove=<?php echo $product['id']; ?>"
 42                            class="remove-button"
 43                            onclick="return confirm('Ви впевнені, що хочете видалити цей товар?')">
 44                             Видалити
 45                         </a>
 46                     </td>
 47                 </tr>
 48             <?php endforeach; ?>
 49         </tbody>
 50         <tfoot>
 51             <tr>
 52                 <td colspan="3" class="total-label">Загальна сума:</td>
 53                 <td colspan="2" class="total-value"><?php echo formatPrice($cartTotal); ?> ₴</td>
 54             </tr>
 55         </tfoot>
 56     </table>
 57
 58     <div class="basket-actions">
 59         <a href="index.php" class="button">Продовжити покупки</a>
 60     </div>
 61 <?php endif; ?>
 62
 63 <?php require_once 'includes/footer.php'; ?>
В.4  Код для створення головної сторінки
GitHub репозиторій: 
  1 <?php
  2 require_once 'includes/header.php';
  3 ?>
  4
  5 <div class="home-container">
  6     <h1>Вітаємо вас в продовольчому магазині "Весна"</h1>
  7
  8     <div class="welcome-text">
  9         <p>У нас ви знайдете найсвіжіші та найнатуральніші продукти для вас та вашої родини.</p>
 10     </div>
 11
 12     <div class="home-buttons">
 13         <a href="index.php" class="btn btn-primary">Почати покупки</a>
 14         <a href="basket.php" class="btn btn-primary">Перейти до кошика</a>
 15     </div>
 16 </div>
 17
 18 <?php
 19 require_once 'includes/footer.php';
 20 ?>


В.5  Фрагмент коду, що відображає header
  1 <?php
  2 session_start();
  3 require_once __DIR__ . '/functions.php';
  4 ?>
  5 <!DOCTYPE html>
  6 <html lang="uk">
  7 <head>
  8     <meta charset="UTF-8">
  9     <meta name="viewport" content="width=device-width, initial-scale=1.0">
 10     <title>Інтернет-магазин</title>
 11     <link rel="stylesheet" href="/assets/css/style.css">
 12 </head>
 13 <body>
 14     <header>
 15         <nav>
 16             <ul>
 17                 <li><a href="/home.php">Головна</a></li>
 18                 <li><a href="/index.php">Товари</a></li>
 19                 <li><a href="/basket.php">Кошик</a></li>
 20             </ul>
 21         </nav>
 22     </header>
 23     <main>


В.6  Фрагмент коду, що відображає footer
  1     </main>
  2     <footer>
  3         <div class="footer-nav">
  4             <ul>
  5                 <li><a href="/home.php">Головна</a></li>
  6                 <li><a href="/index.php">Товари</a></li>
  7                 <li><a href="/basket.php">Кошик</a></li>
  8             </ul>
  9         </div>
 10     </footer>
 11 </body>
 12 </html>


В.7  Допоміжні функції
  1 <?php
  2 function getDbConnection() {
  3     static $db = null;
  4     if ($db === null) {
  5         $dbFile = __DIR__ . '/../../db/webshop.sqlite';
  6         try {
  7             $db = new PDO('sqlite:' . $dbFile);
  8             $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  9         } catch (PDOException $e) {
 10             die("Connection failed: " . $e->getMessage());
 11         }
 12     }
 13     return $db;
 14 }
 15
 16 function getProducts() {
 17     $db = getDbConnection();
 18     $stmt = $db->query("SELECT * FROM products ORDER BY name");
 19     return $stmt->fetchAll(PDO::FETCH_ASSOC);
 20 }
 21
 22 function getProductById($id) {
 23     $db = getDbConnection();
 24     $stmt = $db->prepare("SELECT * FROM products WHERE id = ?");
 25     $stmt->execute([$id]);
 26     return $stmt->fetch(PDO::FETCH_ASSOC);
 27 }
 28
 29
 30 function initCart() {
 31     if (!isset($_SESSION['cart'])) {
 32         $_SESSION['cart'] = [];
 33     }
 34 }
 35
 36 function addToCart($productId, $quantity) {
 37     initCart();
 38     if (isset($_SESSION['cart'][$productId])) {
 39         $_SESSION['cart'][$productId] += $quantity;
 40     } else {
 41         $_SESSION['cart'][$productId] = $quantity;
 42     }
 43 }
 44
 45 function removeFromCart($productId) {
 46     if (isset($_SESSION['cart'][$productId])) {
 47         unset($_SESSION['cart'][$productId]);
 48     }
 49 }
 50
 51 function getCartProducts() {
 52     $cartProducts = [];
 53     if (!empty($_SESSION['cart'])) {
 54         foreach ($_SESSION['cart'] as $productId => $quantity) {
 55             $product = getProductById($productId);
 56             if ($product) {
 57                 $product['quantity'] = $quantity;
 58                 $product['total'] = $product['price'] * $quantity;
 59                 $cartProducts[] = $product;
 60             }
 61         }
 62     }
 63     return $cartProducts;
 64 }
 65
 66 function getCartTotal() {
 67     $total = 0;
 68     foreach (getCartProducts() as $product) {
 69         $total += $product['total'];
 70     }
 71     return $total;
 72 }
 73
 74 function validateQuantity($quantity) {
 75     return is_numeric($quantity) && $quantity > 0;
 76 }
 77
 78 function formatPrice($price) {
 79     return number_format($price, 2);
 80 }
 81
 82 function h($string) {
 83     return htmlspecialchars($string, ENT_QUOTES, 'UTF-8');
 84 }
 85 ?>